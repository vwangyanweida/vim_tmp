### 快速掌握一个语言的50%

### 一.主要数学运算符和print函数使用
#### 1. 基本数据结构
#### 2. 基本语法
#### 3. 主要语言构造

#### 二.高级数据结构 
##### 1. 数组和集合类
##### 2. 泛型

#### 三. 字符串处理：替换，查找、截断
##### 1. Regex
##### 2. Parser
##### <font color=green>3. 字符编码</font>

#### 四. 基本面向对象或函数式编程的特征
##### 1. 继承
##### 2. 多态
##### 3. Lambda 函数

#### 五. 调试：TDD技能
##### 1. 异常
##### 2. 错误处理
##### 3. 断言
##### 4. 日志
##### 5. 调试支持
##### <font color=green>6. 单元测试</font>

#### <font color=green>六. 运行时</font>
##### 1. 程序代码和可执行代码的组织机制
##### 2. 运行时模块加载
##### 3. 符号查找机制

#### 七. 流
##### 1. 基本输入输出
##### 2. 文件处理
##### 3. 输入输出流类的组织

#### 八. 事件驱动
##### 1. callback 方法调用
##### 2. 如何支持事件驱动编程模型
1. .NET 的delegate，Java的anonymous inner class，Java 7的closure，C++OX的tr1::function/bind……等各种语言都会在这里下足功夫。

#### 九. 序列化和反序列化
##### 1. 缺省机制

#### 十. regex和XML处理问题，可以跳过

#### 十一. 并发
##### 1. 线程
##### 2. 进程
##### 3. 并发
##### 4. 异步调用

#### 十二. <font color=green>动态编程</font>
##### 1. 反射
##### 2. 元数据编程
##### 3. 数据和程序之间的相互转化机制
##### 4. 运行时编译和执行的机制

#### 十三. 语言常用的特色feature
1. 例如Ruby的block interator，Java的dynamic proxy，C# 3的LINQ和extension method

#### 十四. 闲暇考虑 
##### 1. 这个语言有哪些惯用法和模式 
##### 2. 这个语言的编译/解释执行机制
##### 3. 泛型

#### 十五. C/C++ 需要考虑内存模型

#### 十六. 之后
##### 1. 数据库 
##### 2. 网络
##### 3. 图形
##### 4. 框架
##### 5. 库

